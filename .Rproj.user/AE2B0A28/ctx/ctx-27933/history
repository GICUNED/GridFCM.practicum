merge(s.con,su.con)
merge(su.con,su.con)
merge(su.con,su.con, by =1)
su.con[1:5] <- "adios"
su.con<- su.wimp$constructs$constructs
su.con.2<- su.wimp$constructs$constructs
su.con.2[1:5] <- "adios"
merge(su.con,su.con.2)
merge(su.con,su.con.2, by =1)
?merge
merge(su.con,su.con.2, by =1, sort = FALSE)
.merge.wimp <- function(wimp1,wimp2){
c1 <- wimp1$constructs$constructs
c2 <- wimp2$constructs$constructs
df1 <- data.frame(c1,1:length(c1))
names(df1) <- c("Construct", "wimp1 index")
df2 <- data.frame(c2,1:length(c2))
names(df1) <- c("Construct", "wimp2 index")
result <- merge(df1,df2, by=1, sort=FALSE)
}
.merge.wimp(su.wimp,su.wimp)
.merge.wimp <- function(wimp1,wimp2){
c1 <- wimp1$constructs$constructs
c2 <- wimp2$constructs$constructs
df1 <- data.frame(c1,1:length(c1))
names(df1) <- c("Construct", "wimp1 index")
df2 <- data.frame(c2,1:length(c2))
names(df1) <- c("Construct", "wimp2 index")
result <- merge(df1,df2, by=1, sort=FALSE)
return(result)
}
.merge.wimp(su.wimp,su.wimp)
.merge.wimp <- function(wimp1,wimp2){
c1 <- wimp1$constructs$constructs
c2 <- wimp2$constructs$constructs
df1 <- data.frame(c1,1:length(c1))
names(df1) <- c("Construct", "wimp1 index")
df2 <- data.frame(c2,1:length(c2))
names(df2) <- c("Construct", "wimp2 index")
result <- merge(df1,df2, by=1, sort=FALSE)
return(result)
}
.merge.wimp(su.wimp,su.wimp)
.merge.wimp <- function(wimp1,wimp2){
c1 <- wimp1$constructs$constructs
c2 <- wimp2$constructs$constructs
df1 <- data.frame(c1,1:length(c1))
names(df1) <- c("Construct", "index1")
df2 <- data.frame(c2,1:length(c2))
names(df2) <- c("Construct", "index2")
result <- merge(df1,df2, by=1, sort=FALSE)
return(result)
}
library(GridFCM)
.merge.wimp(su.wimp,su.wimp)
result <- merge(df1,df2, by=1, sort=TRUE)
library(GridFCM)
library(GridFCM)
.merge.wimp <- function(wimp1,wimp2){
c1 <- wimp1$constructs$constructs
c2 <- wimp2$constructs$constructs
df1 <- data.frame(c1,1:length(c1))
names(df1) <- c("Construct", "index1")
df2 <- data.frame(c2,1:length(c2))
names(df2) <- c("Construct", "index2")
result <- merge(df1,df2, by=1, sort=TRUE)
return(result)
}
.merge.wimp <- function(wimp1,wimp2){
c1 <- wimp1$constructs$constructs
c2 <- wimp2$constructs$constructs
df1 <- data.frame(c1,1:length(c1))
names(df1) <- c("Construct", "index1")
df2 <- data.frame(c2,1:length(c2))
names(df2) <- c("Construct", "index2")
result <- merge(df1,df2, by=1, sort=TRUE)
return(resu
))
nrow(data.frame())
.compatibility.merge.wimp <- function(wimp1,wimp2){
merge <- nrow(.merge.wimp(wimp1,wimp2))
if(merge == length(wimp1) && merge == length(wimp2)){
result <- "Full Compatible"
}
if(merge != length(wimp1) | merge != length(wimp2)){
result <- "Partial Compatible"
}
if(merge == 0){
result <- "Incompatible"
}
}
.compatibility.merge.wimp(su.wimp,su.wimp)
library(GridFCM)
.compatibility.merge.wimp <- function(wimp1,wimp2){
merge <- nrow(.merge.wimp(wimp1,wimp2))
if(merge == length(wimp1) && merge == length(wimp2)){
result <- "Full Compatible"
}
if(merge != length(wimp1) | merge != length(wimp2)){
result <- "Partial Compatible"
}
if(merge == 0){
result <- "Incompatible"
}
return(result)
}
.compatibility.merge.wimp(su.wimp,su.wimp)
.compatibility.merge.wimp <- function(wimp1,wimp2){
merge <- nrow(.merge.wimp(wimp1,wimp2))
if(merge == length(wimp1) && merge == length(wimp2)){
result <- "Full Compatible"
}
if(merge != length(wimp1) || merge != length(wimp2)){
result <- "Partial Compatible"
}
if(merge == 0){
result <- "Incompatible"
}
return(result)
}
.compatibility.merge.wimp(su.wimp,su.wimp)
.compatibility.merge.wimp <- function(wimp1,wimp2){
merge <- nrow(.merge.wimp(wimp1,wimp2))
if(merge == length(wimp1) && merge == length(wimp2)){
result <- "Full Compatible"
}
if(merge != length(wimp1$constructs$constructs) || merge != length(wimp2$constructs$constructs)){
result <- "Partial Compatible"
}
if(merge == 0){
result <- "Incompatible"
}
return(result)
}
.compatibility.merge.wimp(su.wimp,su.wimp)
.compatibility.merge.wimp(su.wimp,su.wimp)
.compatibility.merge.wimp <- function(wimp1,wimp2){
merge <- nrow(.merge.wimp(wimp1,wimp2))
if(merge == length(wimp1$constructs$constructs) && merge == length(wimp2$constructs$constructs)){
result <- "Full Compatible"
}
if(merge != length(wimp1$constructs$constructs) || merge != length(wimp2$constructs$constructs)){
result <- "Partial Compatible"
}
if(merge == 0){
result <- "Incompatible"
}
return(result)
}
.compatibility.merge.wimp(su.wimp,su.wimp)
.compatibility.merge.wimp(su.wimp,example.wimp)
example.wimp
su.wimp
example.wimp
su.wimp
wimp <- su.wimp
wimp$constructs$constructs[1:5] <- ""
.compatibility.merge.wimp(su.wimp,wimp)
.merge.wimp(su.wimp,wimp)
example.wimp
library(GridFCM)
.merge.wimp <- function(wimp1,wimp2){
df1 <- data.frame(wimp1$constructs$constructs, wimp1$constructs$l.poles, wimp1$constructs$r.poles, length(c1))
names(df1) <- c("Construct", "lpoles", "rpoles", "index1")
df2 <- data.frame(wimp2$constructs$constructs, wimp2$constructs$l.poles, wimp2$constructs$r.poles, length(c2))
names(df2) <- c("Construct", "lpoles", "rpoles", "index2")
result <- merge(df1,df2, by=1, sort=TRUE)
return(result)
}
merge.wimp(su.wimp,wimp)
.merge.wimp(su.wimp,wimp)
.merge.wimp(su.wimp,wimp)
.merge.wimp <- function(wimp1,wimp2){
df1 <- data.frame(wimp1$constructs$constructs, wimp1$constructs$l.poles, wimp1$constructs$r.poles, length(wimp1$constructs$constructs))
names(df1) <- c("Construct", "lpoles", "rpoles", "index1")
df2 <- data.frame(wimp2$constructs$constructs, wimp2$constructs$l.poles, wimp2$constructs$r.poles, length(wimp2$constructs$constructs))
names(df2) <- c("Construct", "lpoles", "rpoles", "index2")
result <- merge(df1,df2, by=1, sort=TRUE)
return(result)
}
library(GridFCM)
.merge.wimp(su.wimp,wimp)
View(wimp)
View(wimp)
.merge.wimp <- function(wimp1,wimp2){
df1 <- data.frame(wimp1$constructs$constructs, wimp1$constructs$left.poles, wimp1$constructs$right.poles, length(wimp1$constructs$constructs))
names(df1) <- c("Construct", "lpoles", "rpoles", "index1")
df2 <- data.frame(wimp2$constructs$constructs, wimp2$constructs$left.poles, wimp2$constructs$right.poles, length(wimp2$constructs$constructs))
names(df2) <- c("Construct", "lpoles", "rpoles", "index2")
result <- merge(df1,df2, by=1, sort=TRUE)
return(result)
}
.merge.wimp(su.wimp,wimp)
source("~/Asanfe/Ph D/GridFCM/GridFCM (0.3.0)/R/HideFunctions.R")
.merge.wimp <- function(wimp1,wimp2){
df1 <- data.frame(wimp1$constructs$constructs, wimp1$constructs$left.poles, wimp1$constructs$right.poles, length(wimp1$constructs$constructs))
names(df1) <- c("Construct", "lpoles", "rpoles", "index1")
df2 <- data.frame(wimp2$constructs$constructs, wimp2$constructs$left.poles, wimp2$constructs$right.poles, length(wimp2$constructs$constructs))
names(df2) <- c("Construct", "lpoles", "rpoles", "index2")
result <- merge(df1,df2, by=1:3, sort=TRUE)
return(result)
}
.merge.wimp(su.wimp,wimp)
.merge.wimp <- function(wimp1,wimp2){
df1 <- data.frame(wimp1$constructs$constructs, wimp1$constructs$left.poles, wimp1$constructs$right.poles, 1:length(wimp1$constructs$constructs))
names(df1) <- c("Construct", "lpoles", "rpoles", "index1")
df2 <- data.frame(wimp2$constructs$constructs, wimp2$constructs$left.poles, wimp2$constructs$right.poles, 1:length(wimp2$constructs$constructs))
names(df2) <- c("Construct", "lpoles", "rpoles", "index2")
result <- merge(df1,df2, by=1:3, sort=TRUE)
return(result)
}
.merge.wimp(su.wimp,wimp)
.merge.wimp <- function(wimp1,wimp2){
df1 <- data.frame(wimp1$constructs$constructs, wimp1$constructs$left.poles, wimp1$constructs$right.poles, 1:length(wimp1$constructs$constructs))
names(df1) <- c("Construct", "lpoles", "rpoles", "index1")
df2 <- data.frame(wimp2$constructs$constructs, wimp2$constructs$left.poles, wimp2$constructs$right.poles, 1:length(wimp2$constructs$constructs))
names(df2) <- c("Construct", "lpoles", "rpoles", "index2")
result <- merge(df1,df2, by=1:3, sort=FALSE)
return(result)
}
.merge.wimp(su.wimp,wimp)
compatibility.merge.wimp(su.wimp,wimp)
.compatibility.merge.wimp(su.wimp,wimp)
library(GridFCM)
library(GridFCM)
monitoring_plot(wimp,su.wimp)
monitoring_plot(su.wimp,su.wimp)
wimp
.compatibility.merge.wimp(su.wimp,wimp)
monitoring_plot(wimp,su.wimp)
library(GridFCM)
monitoring_plot(wimp,su.wimp)
library(GridFCM)
monitoring_plot(wimp,su.wimp)
monitoring_plot(wimp,su.wimp)
library(GridFCM)
.merge.wimp <- function(wimp1,wimp2){
df1 <- data.frame(wimp1$constructs$constructs, wimp1$constructs$left.poles, wimp1$constructs$right.poles, 1:length(wimp1$constructs$constructs))
names(df1) <- c("Construct", "lpoles", "rpoles", "index1")
df2 <- data.frame(wimp2$constructs$constructs, wimp2$constructs$left.poles, wimp2$constructs$right.poles, 1:length(wimp2$constructs$constructs))
names(df2) <- c("Construct", "lpoles", "rpoles", "index2")
result <- merge(df1,df2, by=1:3, sort=FALSE)
return(result)
}
.merge.wimp(su.wimp,wimp)
wimp <- importwimp(file.choose())
.merge.wimp(su.wimp,wimp)
monitoring_plot(wimp,su.wimp)
wimp
wimp <- importwimp(file.choose())
monitoring_plot(wimp,su.wimp)
.merge.wimp(su.wimp,wimp)
monitoring_plot(wimp,su.wimp)
.merge.wimp <- function(wimp1,wimp2){
df1 <- data.frame(wimp1$constructs$constructs, wimp1$constructs$left.poles, wimp1$constructs$right.poles, 1:length(wimp1$constructs$constructs))
names(df1) <- c("Construct", "lpoles", "rpoles", "index1")
df2 <- data.frame(wimp2$constructs$constructs, wimp2$constructs$left.poles, wimp2$constructs$right.poles, 1:length(wimp2$constructs$constructs))
names(df2) <- c("Construct", "lpoles", "rpoles", "index2")
result <- merge(df1,df2, by=1:3, sort=FALSE)
return(result)
}
.merge.wimp(su.wimp,wimp)
.compatibility.merge.wimp(su.wimp,wimp)
.compatibility.merge.wimp(wimp,su.wimp)
monitoring_plot(wimp,su.wimp)
monitoring_plot(wimp,su.wimp)
monitoring_plot(wimp,su.wimp)
library(GridFCM)
monitoring_plot(wimp,example.wimp)
library(GridFCM)
monitoring_plot(wimp,example.wimp)
library(GridFCM)
library(GridFCM)
library(GridFCM)
monitoring_plot(wimp,example.wimp)
monitoring_plot(wimp,su.wimp)
monitoring_plot(su.wimp)
adjustment_plot(su.wimp)
library(GridFCM)
scenariomatrix(su.wimp, c(0,0,-1,rep(0,18)))
scn <- scenariomatrix(su.wimp, c(0,0,-1,rep(0,18)))
pcsd(scn)
wimp
usethis::use_testthat()
library(GridFCM)
?importExcel
library(GridFCM)
?importwimp
library(GridFCM)
Rprof()
wimp_biplot(su.wimp)
self_index(su.wimp)
?indexDilemma
library(GridFCM)
?if_index
library(GridFCM)
?if_index
library(GridFCM)
?if_index
?if_index
?if_index
?if_index
library(GridFCM)
?if_index
if_plot(su.wimp)
library(GridFCM)
library(GridFCM)
library(GridFCM)
library(GridFCM)
library(GridFCM)
?cor
library(GridFCM)
self_index(su.wimp)
self_index(su.wimp)
library(GridFCM)
library(GridFCM)
self_index(su.wimp)
self_index(su.wimp, method="spearman")
self_index(su.wimp, method="spearman", rc=FALSE)
self_index(su.wimp)
?self_index
library(GridFCM)
?self_index
library(GridFCM)
library(GridFCM)
library(GridFCM)
?self_index
digraph(example.wimp,vertex.vector = rep(100,5))
library(GridFCM)
digraph(example.wimp,vertex.vector = rep(100,5))
library(GridFCM)
digraph(example.wimp,vertex.vector = rep(100,5))
digraph(example.wimp,vertex.vector = rep(100,5))
library(GridFCM)
example.wimp
library(GridFCM)
auc_index(scn)
pcsd(scn)
library(GridFCM)
auc_index(scn)
library(GridFCM)
auc_index(scn)
library(GridFCM)
auc_index(scn)
scn
View(scn)
View(scn)
library(GridFCM)
auc_index(scn)
library(GridFCM)
auc_index(scn)
library(GridFCM)
library(GridFCM)
auc_index(scn)
auc_index(scn, std = FALSE)
library(GridFCM)
stability_index(scn, std = FALSE)
stability_index(scn)
library(GridFCM)
stability_index(scn)
stability_index(scn)
library(GridFCM)
stability_index(scn)
library(GridFCM)
pcsd_summary(scn)
scn
mean(scn)
colMeans(scn)
scn
colMeans(scn$values)
library(GridFCM)
pcsd_summary(scn)
?indexSelfConstruction
?elementCor
library(GridFCM)
self_index(su.wimp)
library(GridFCM)
self_index(su.wimp)
library(GridFCM)
library(GridFCM)
library(GridFCM)
library(GridFCM)
idealdigraph(su.wimp, inc=TRUE )
?simdigraph
library(GridFCM)
?digraph
webshot::install_phantomjs()
digraph(su.wimp)
library(GridFCM)
library(GridFCM)
library(GridFCM)
library(GridFCM)
eigen_index(wimp)
ph_index(su.wimp)
ph_index(su.wimp, std= "vertices")
ph_plot(wimp)
ph_plot(su.wimp)
ph_plot(su.wimp)
IF_plot(su.wimp)
if_plot(su.wimp)
ph_plot(example.wimp)
scenariomatrix(example.wimp, rep(1,5))
scnscenariomatrix(example.wimp, rep(1,5))
scn <-
scnscenariomatrix(example.wimp, rep(1,5))
scn <- scenariomatrix(example.wimp, rep(1,5))
pcsd(scn)
library(GridFCM)
monitoring_plot(wimp,wimp)
self_index(su.wimp)
adjustment_plot(su.wimp)
sum(1,2,3)
wicht(2=3)
which(1=2)
which(1==2)
which(1==1)
sim_index <- function(x,y,alpha = 1, beta = 1){
int <- x[which(x*y >= 0)]
vec.x.minus.y <- x[which(x*y <= 0)]
vec.y.mius.x <- y[which(x*y <= 0)]
int.xy <- sum(abs(vec.int))
x.minus.y <- sum(abs(vec.x.minus.y))
y.minus.x <- sum(abs(vec.y.minus.x))
sim.ratio <- int.xy / (inst.xy + alpha * x.minus.y + beta y.minus.x)
sim_index <- function(x,y,alpha = 1, beta = 1){
int <- x[which(x*y >= 0)]
vec.x.minus.y <- x[which(x*y <= 0)]
vec.y.mius.x <- y[which(x*y <= 0)]
int.xy <- sum(abs(vec.int))
x.minus.y <- sum(abs(vec.x.minus.y))
y.minus.x <- sum(abs(vec.y.minus.x))
sim.ratio <- int.xy / (inst.xy + alpha * x.minus.y + beta * y.minus.x)
}
x <- c(-1, 0, 1)
y <- c( -1, 0 , -1)
sim_index(x,y)
sim_index <- function(x,y,alpha = 1, beta = 1){
vec.int <- x[which(x*y >= 0)]
vec.x.minus.y <- x[which(x*y <= 0)]
vec.y.mius.x <- y[which(x*y <= 0)]
int.xy <- sum(abs(vec.int))
x.minus.y <- sum(abs(vec.x.minus.y))
y.minus.x <- sum(abs(vec.y.minus.x))
sim.ratio <- int.xy / (inst.xy + alpha * x.minus.y + beta * y.minus.x)
}
sim_index(x,y)
sim_index <- function(x,y,alpha = 1, beta = 1){
vec.int <- x[which(x*y >= 0)]
vec.x.minus.y <- x[which(x*y <= 0)]
vec.y.minus.x <- y[which(x*y <= 0)]
int.xy <- sum(abs(vec.int))
x.minus.y <- sum(abs(vec.x.minus.y))
y.minus.x <- sum(abs(vec.y.minus.x))
sim.ratio <- int.xy / (inst.xy + alpha * x.minus.y + beta * y.minus.x)
}
sim_index(x,y)
sim_index <- function(x,y,alpha = 1, beta = 1){
vec.int <- x[which(x*y >= 0)]
vec.x.minus.y <- x[which(x*y <= 0)]
vec.y.minus.x <- y[which(x*y <= 0)]
int.xy <- sum(abs(vec.int))
x.minus.y <- sum(abs(vec.x.minus.y))
y.minus.x <- sum(abs(vec.y.minus.x))
sim.ratio <- int.xy / (int.xy + alpha * x.minus.y + beta * y.minus.x)
}
sim_index(x,y)
sim_index <- function(x,y,alpha = 1, beta = 1){
vec.int <- x[which(x*y >= 0)]
vec.x.minus.y <- x[which(x*y <= 0)]
vec.y.minus.x <- y[which(x*y <= 0)]
int.xy <- sum(abs(vec.int))
x.minus.y <- sum(abs(vec.x.minus.y))
y.minus.x <- sum(abs(vec.y.minus.x))
sim.ratio <- int.xy / (int.xy + alpha * x.minus.y + beta * y.minus.x)
return(sim.ratio)
}
sim_index(x,y)
y <- c( -1, 0 , 1)
sim_index(x,y)
y <- c( -1,-1, 0 , 1)
x <- c(1,-1, 0, 1)
sim_index(x,y)
x <- c(1,-1, 0, -1)
sim_index(x,y)
source("~/Asanfe/Ph D/GridFCM/GridFCM (0.3.0)/R/AdjustmentFunctions.R")
sim_index(x,y)
x <- c(1,-1, 0, 1)
sim_index(x,y)
0 | 1
0 | 0
1 | 1
!= 1 | 1
0 != 1 | 1
0 | 0
isFALSE(0)
isFALSE(1)
! 0 | 0
! 1 | 0
! 1 | 1
! 0 | 1
! (0 | 1)
! (0 | 0)
! (1 | 1)
source("~/Asanfe/Ph D/GridFCM/GridFCM (0.3.0)/R/AdjustmentFunctions.R")
self_index(su.wimp, method = "sim")
self_index(su.wimp, method = "sim")
rm(self_index())
rm(self_index)
rm(adjustment_plot())
rm(adjustment_plot)
self_index(su.wimp, method = "sim")
self_index(su.wimp, method = "sim")
