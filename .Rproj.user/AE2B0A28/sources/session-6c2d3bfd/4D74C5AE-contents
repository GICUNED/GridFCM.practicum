### COMPLEXITY INDEX ###

# SQM index ---------------------------------------------------

#' SQM index -- sqm_index()
#'
#' @return
#' @export
#'
#' @examples
#'

sqm_index <- function(wimp){

wimp <- .hypo.matrix(wimp)

n.constructs <- length(rownames(wimp))
n.elements <- length(colnames(wimp))

smatrix <- c()

for(n in 1:n.elements) {

element.n <- wimp[,n]
name <- colnames(wimp)[n]

nmatrix <- 2 - abs(element.n - wimp[,-n])
nmatrix <- t(nmatrix)
rownames(nmatrix) <- paste(name,"-",rownames(nmatrix))

smatrix <- rbind(smatrix,nmatrix)
}

c.loads <-c()
a <- 1
for(n in 1:n.elements) {
b <- a + (n.elements - 2)
ematrix <- smatrix[a:b,]
pca <- prcomp(t(ematrix), rank. = 2)

pca.nelement <- pca$x
pvaff <- (pca$sdev^2 / sum(pca$sdev^2))[1]
pvasf <- (pca$sdev^2 / sum(pca$sdev^2))[2]

n.loads <- pca.nelement[,1] * pvaff + pca.nelement[,2] * pvasf
c.loads <- rbind(c.loads,n.loads)
a <- a + (n.elements - 1)

}
row.names(c.loads) <- colnames(wimp)

int.matrix <- c.loads
int.matrix[int.matrix<0] <- 0
n.cases <- apply(int.matrix, 2, function(x) sum(x > 0))

int.load <- colSums(int.matrix) / n.cases
int.load[is.nan(int.load)] <- 0

diff.matrix <- c.loads
diff.matrix[diff.matrix > 0] <- 0
n.cases <- apply(diff.matrix, 2, function(x) sum(x < 0))

diff.load <- abs(colSums(diff.matrix) / n.cases)
diff.load[is.nan(diff.load)] <- 0

result <- cbind(int.load,diff.load)

return(result)

}

#SQM Bar Chart Function ----------------------------------------------------------------


  #' Impact and Feedback Bar Chart  -- if_barchart()
  #'
  #' @description This function creates a bar chart to show the results of the
  #'              \code{\link{if_index}} function.
  #'
  #' @param wimp Subject's WimpGrid. It must be a "wimp" S3 object
  #'        imported by the \code{\link{importwimp}} function.
  #' @param show A character string indicating the constructs to be displayed. 'all' will display
  #'        all constructus, 'dil' will only display dilemmatic constructs and 'nodil' will
  #'        exclude dilemmatic constructs. Default is 'all'.
  #' @param ... additional arguments are passed from \code{\link{if_index}}
  #'        function.
  #'
  #' @author Alejandro Sanfeliciano
  #'
  #' @return returns a interactive bar chart made with plotly.
  #'
  #' @export
  #'
  #' @import plotly
  #'
  #' @examples
  #'
  #' if_barchart(example.wimp)
  #'

  sqm_barchart <- function(wimp, show = "all",...){

    # Align wimp
    wimp <- .align.wimp(wimp, exclude.dilemmatics = FALSE)

    #Extract important info

    self.poles <- wimp$constructs$self.poles
    rigth.poles <- wimp$constructs$right.poles
    constructs <- wimp$constructs$constructs

    dim <- length(constructs)
    dil <- .which.dilemmatics(wimp)

    color.line.p <- rep("lightblue",dim)
    if(show == "all"){color.line.p[dil] <- "#FFD97D"}

    color.line.n <- rep("purple",dim)
    if(show == "all"){color.line.n[dil] <- "#FFD97D"}

    width.line <- rep(1,dim)
    if(show == "all"){width.line[dil] <- 1}

    pattern <- rep(0,dim)
    pattern[dil] <- 1
    # Set up data frame for further plotting
    df <- sqm_index(wimp,...)
    df <- data.frame(df,df[1]+df[2],rigth.poles,self.poles,constructs,color.line.n,color.line.p,width.line)
    df[,2] <- -df[,2]

    # Row and col names of data frame
    names(df) <- c("int","diff","global","right.poles","self.poles","construct","colorn","colorp","widthline")
    rownames(df) <- constructs

    # Show options
    if(show == "nodil"){
      df <- df[-dil,]
    }
    if(show == "dil"){
      df <- df[dil,]
    }

    # Plotting
    # Important info to plot
    range <- max(abs(df[c(1,2)])) + 0.15 * max(abs(df[c(1,2)]))

    # Plot fig1
    fig1 <- plot_ly(
      data = df,
      x = ~int,
      y = ~reorder(constructs, global),
      type = "bar",
      orientation = "h",
      marker = list(color = "lightblue", line = list(color = ~colorp, width = ~widthline), pattern = list(shape = ~ifelse(pattern == 1, "/", ""),fillmode="overlay", fgcolor="#FFEE7D", size=20)),
      hovertext = ~paste('<B>', construct,'</B>', '\nSelf:', self.poles, '\nPositive Impact:', round(int, 2)),
      hoverinfo = "text"
    ) %>% add_trace(
      x = ~diff,
      name = 'DIFFERENTATION ----- INTEGRATION',
      marker = list(color = "purple", line = list(color = ~colorn, width = ~widthline), pattern = list(shape = ~ifelse(pattern == 1, "/", ""),fillmode="overlay", fgcolor="#FFEE7D", size=20)),
      hovertext = ~paste('<B>', construct,'</B>','\nSelf:', self.poles, '\nNegative Impact:', round(diff, 2)),
      hoverinfo = "text"
    ) %>% layout(
      barmode = "overlay",
      bargap = 0.08,
      xaxis = list(title = "DIFFERENTATION ----- INTEGRATION", range = c(-range, range), showline = TRUE),
      yaxis = list(title = "", showgrid = TRUE, showline = TRUE),
      showlegend = FALSE
    )

    return(fig1)
  }

  # IF Plot Function ----------------------------------------------------------------

  #' IF Index Plot  -- if_plot()
  #'
  #' @description This function creates a scatter plot to show the results of the
  #'              \code{\link{if_index}} function.
  #'
  #' @param wimp Subject's WimpGrid. It must be a "wimp" S3 object
  #'        imported by the \code{\link{importwimp}} function.
  #' @param show A character string indicating the constructs to be displayed. 'all' will display
  #'        all constructus, 'dil' will only display dilemmatic constructs and 'nodil' will
  #'        exclude dilemmatic constructs. Default is 'all'.
  #' @param text.size Scalar that modifies the text size. Default is 1.
  #' @param center Establishes the centre of the frame. Use "data" to set the data
  #'        to be framed and "origin" to set the origin to be in the centre. the default
  #'        is "data".
  #' @param ... additional arguments are passed from \code{\link{if_index}}
  #'        function.
  #'
  #' @author Maite Benitez Santos, Guillermo Calleja Garate and Alejandro Sanfeliciano
  #'
  #' @return returns a interactive scatter plot made with Plotly.
  #'
  #' @export
  #'
  #' @import plotly
  #'
  #' @examples
  #'
  #' if_plot (example.wimp)
  #'

  sqm_plot <- function(wimp, show = "all", center = "data", text.size = 1, ...) {

    # Align wimpgrid towards ideal
    wimp <- .align.wimp(wimp, exclude.dilemmatics = FALSE)

    # Extract important info
    self.poles <- wimp$constructs$self.poles
    right.poles <- wimp$constructs$right.poles
    constructs <- wimp$constructs$constructs
    dil <- .which.dilemmatics(wimp)
    construct.color <- .construct.colors(wimp, "red/green")

    # Set up data.frame
    df <- sqm_index(wimp, ...)
    df <- data.frame (df, right.poles, constructs, self.poles, construct.color)


    # Row and col names for data.frame
    names(df) <- c("int", "diff", "poles", "construct", "self", "color")
    rownames(df) <- right.poles

    # Show options
    if(show == "nodil"){
      df <- df[-dil,]
    }
    if(show == "dil"){
      df <- df[dil,]
    }

    # Plotting
    # Axis set up
    if(center == "data"){
      irange.min <- min(df[1]) - 0.15 * max(abs(df[1]))
      irange.max <- max(df[1]) + 0.15 * max(abs(df[1]))

      frange.min <- min(df[2]) - 0.15 * max(abs(df[2]))
      frange.max <- max(df[2]) + 0.15 * max(abs(df[2]))
    }

    if(center == "origin"){

      irange.min <- -(max(abs(df[1])) + 0.15 * max(abs(df[1])))
      irange.max <- max(abs(df[1])) + 0.15 * max(abs(df[1]))

      frange.min <- -(max(abs(df[2])) + 0.15 * max(abs(df[2])))
      frange.max <- max(abs(df[2])) + 0.15 * max(abs(df[2]))
    }

    # Scatter plot
    fig <- plot_ly(
      data = df,
      x = ~diff,
      y = ~int
    ) %>% add_annotations(
      data = df,
      x = ~diff,
      y = ~int,
      text = ~construct,
      hoverinfo = 'text',
      font = list(size = 15 * text.size),
      showarrow = FALSE,
      xanchor = 'center',
      yanchor = 'bottom',
      yshift = 5
    ) %>% add_markers(
      data = df,
      x = ~diff,
      y = ~int,
      marker = list(color = ~color, size = 7, line = list(color = 'black', width = 1)),
      text = ~paste('<B>',construct,'</B>' , '\nSelf:', self, '\nDifferentation:', round(diff,digits = 2), '\nIntegration:', round(int,digits = 2)),
      hoverinfo = 'text'
    ) %>% layout(
      xaxis = list(title = "DIFFERENTATION",
                   range = c(irange.min,irange.max),
                   gridcolor ="white",
                   gridwidth= 0.5,
                   zeroline = TRUE,
                   zerolinecolor = "black",
                   zerolinewidth = 2),
      yaxis = list(title = "INTEGRATION",
                   range = c(frange.min,frange.max),
                   gridcolor ="white",
                   gridwidth= 0.5,
                   zeroline = TRUE,
                   zerolinecolor = "black",
                   zerolinewidth = 2),
      showlegend = FALSE,
      shapes = shapes
    )

    # Return function
    return(fig)
  }
